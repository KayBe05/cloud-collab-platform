version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: cloudx-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cloudx}
      POSTGRES_USER: ${POSTGRES_USER:-cloudx_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudx_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cloudx_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudx-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Flask Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cloudx-app
    environment:
      FLASK_APP: app.py
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-0}
      SECRET_KEY: ${SECRET_KEY:-change-me-in-production}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-cloudx}
      POSTGRES_USER: ${POSTGRES_USER:-cloudx_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudx_password}
    ports:
      - "5000:5000"
    volumes:
      - ./app.py:/app/app.py:ro
      - ./templates:/app/templates:ro
      - ./static:/app/static:ro
      - app_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cloudx-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: cloudx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudx-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  cloudx-network:
    driver: bridge